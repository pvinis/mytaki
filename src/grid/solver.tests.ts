import mls from 'multilines'
import {parse} from './parser'
import {solve} from './solver'

describe('solver', () => {
	it('does nothing when nothing can happen', () => {
		expect(solve(parse(mls`
			|<<FRONT
			|.y......
			|.y......
			|.g......
			|........
			|........
			|........
			|<<BACK
		`))).toStrictEqual({
			side: 'bottom',
			grid: mls`
				|<<FRONT
				|.y......
				|.y......
				|.g......
				|........
				|........
				|........
				|<<BACK
			`,
			legend: {y: 'arrows', g: 'arrows'},
		})
	})

	it('solves an attack', () => {
		expect(solve({
			side: 'bottom',
			grid: mls`
				|<<FRONT
				|.y......
				|.y......
				|.y......
				|........
				|........
				|........
				|<<BACK
			`,
			legend: ['y'],
		})).toStrictEqual({
			side: 'bottom',
			grid: mls`
					|<<FRONT
					|.Y......
					|.Y......
					|.Y......
					|........
					|........
					|........
					|<<BACK
				`,
			legend: {Y: 'arrows attack'},
		})
	})

	it('solves multiple attacks', () => {
		expect(
			solve({
				side: 'bottom',
				grid: mls`
			|<<FRONT
			|.y..g...
			|.y..g...
			|.y..g...
			|........
			|........
			|........
			|<<BACK
			|y: arrows
			|g: arrows
			`,
				legend: {},
			}),
		).toStrictEqual(mls`
			|<<FRONT
			|.Y..G...
			|.Y..G...
			|.Y..G...
			|........
			|........
			|........
			|<<BACK
			|y: arrows
			|Y: arrows attack
			|g: arrows
			|G: arrows attack
			`)
	})

	it('solves multiple attacks with object', () => {
		expect(
			solve({
				side: 'bottom',
				grid: mls`
					|<<FRONT
					|.y..g...
					|.y..g...
					|.y..g...
					|........
					|........
					|........
					|<<BACK
				`,
				legend: {
					y: 'arrows',
					g: 'arrows',
				},
			}),
		).toStrictEqual({
			grid: mls`
			|<<FRONT
			|.Y..G...
			|.Y..G...
			|.Y..G...
			|........
			|........
			|........
			|<<BACK
			`,
			legend: {
				y: 'arrows',
				Y: 'arrows attack',
				g: 'arrows',
				G: 'arrows attack',
			},
		})
	})
})
