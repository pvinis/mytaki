import mls from "multilines"
import { parse } from "./parser"
import { solve } from "./solver"


describe("solver", () => {
	it("does nothing when nothing can happen", () => {
		expect(solve(parse(mls`
			|<<FRONT
			|.y......
			|.y......
			|.g......
			|........
			|........
			|........
			|<<BACK
		`))).toStrictEqual(parse(mls`
			|<<FRONT
			|.y......
			|.y......
			|.g......
			|........
			|........
			|........
			|<<BACK
		`))
	})

	it("solves an attack", () => {
		expect(solve(parse(mls`
			|<<FRONT
			|.y......
			|.y......
			|.y......
			|........
			|........
			|........
			|<<BACK
		`))).toStrictEqual(parse(mls`
			|<<FRONT
			|.Y......
			|.Y......
			|.Y......
			|........
			|........
			|........
			|<<BACK
		`, ".yY"))
	})

	fit("solves multiple attacks", () => {
		expect(solve(parse(mls`
			|<<FRONT
			|.y..g...
			|.y..g...
			|.y..g...
			|........
			|........
			|........
			|<<BACK
		`))).toStrictEqual(parse(mls`
			|<<FRONT
			|.Y..G...
			|.Y..G...
			|.Y..G...
			|........
			|........
			|........
			|<<BACK
		`, ".ygYG"))
	})

	it("solves multiple attacks with object", () => {
		expect(solve(parse(mls`
			|<<FRONT
			|.y..g...
			|.y..g...
			|.y..g...
			|........
			|........
			|........
			|<<BACK
		`))).toStrictEqual(parse(mls`
			|<<FRONT
			|.Y..G...
			|.Y..G...
			|.Y..G...
			|........
			|........
			|........
			|<<BACK
		`))
	})
})
